# https://leetcode.com/problems/number-of-islands/
# https://leetcode.com/problems/number-of-islands/discuss/2499215/Python-oror-No-Recursion-oror-Faster-than-82-oror-Less-than-92
from collections import deque
from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def is_valid(i, j):
            return True if 0 <= i < row_len and 0 <= j < col_len and grid[i][j] == "1" else False

        row_len, col_len = len(grid), len(grid[0])
        island_count = 0
        for row in range(row_len):
            for col in range(col_len):
                if is_valid(row, col):
                    island_count += 1
                    queue = deque([(row, col)])
                    while len(queue) > 0:
                        prev_row, prev_col = queue.popleft()
                        if grid[prev_row][prev_col] == "1":
                            grid[prev_row][prev_col] = "0"
                            for row_move, col_move in ((-1, 0), (1, 0), (0, 1), (0, -1)):
                                adj_row, adj_col = prev_row + row_move, prev_col + col_move
                                if is_valid(adj_row, adj_col):
                                    queue.append((adj_row, adj_col))

        return island_count


grid = [
    ["1", "1", "0", "0", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "1", "0", "0"],
    ["0", "0", "0", "1", "1"],
]
# Output = 3
grid = [
    ["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],
    ["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],
    ["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],
    ["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],
    ["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],
    ["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],
    ["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],
    ["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],
    ["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],
    ["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],
    ["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],
    ["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],
    ["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],
    ["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],
    ["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],
    ["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],
    ["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],
    ["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],
    ["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],
    ["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]
]
# Output = 58
sol = Solution()
result = sol.numIslands(grid)
print(result)
