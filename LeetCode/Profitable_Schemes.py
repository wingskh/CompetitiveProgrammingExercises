# https://leetcode.com/problems/profitable-schemes/
class Solution:
    # Time Complexity   =   O(len(group) * minProfit * n)
    # Space Complexity  =   O(len(group) * minProfit * n)
    # dp[i][j][k]:  The number of schemes that can be chosen for first i schemes
    #               when the number of group members is j and
    #               the profit is k
    def profitableSchemes(
        self, n: int, minProfit: int, group: List[int], profit: List[int]
    ) -> int:
        group_length = len(group)
        member_range = n + 1
        profitable_scheme_dp = [
            [[0] * (minProfit + 1) for _ in range(member_range + 1)]
            for _ in range(group_length)
        ]
        mod = 1000000000 + 7
        profitable_scheme_dp[0][0][0] = 1
        profitable_scheme_dp[0][min(group[0], member_range)][
            min(profit[0], minProfit)
        ] = 1

        for i in range(1, group_length):
            for m in range(member_range - 1, -1, -1):
                for p in range(minProfit, -1, -1):
                    profitable_scheme_dp[i][m][p] += profitable_scheme_dp[i - 1][m][p]
                    profitable_scheme_dp[i][min(member_range, m + group[i])][
                        min(minProfit, p + profit[i])
                    ] += profitable_scheme_dp[i][m][p]

        for i in profitable_scheme_dp:
            print(i)

        result = 0
        for m in range(member_range):
            if profitable_scheme_dp[-1][m][-1] >= 1:
                result += profitable_scheme_dp[-1][m][-1]
                result %= mod

        return result

    # Time Complexity   =   O(len(group) * minProfit * n)
    # Space Complexity  =   O(minProfit * n)
    # dp[i][j]: The number of schemes that can be chosen
    #           when the number of group members is i and
    #           the profit is j
    def profitableSchemes(self, n: int, minProfit: int, group, profit) -> int:
        profitable_scheme_dp = [[0] * (minProfit + 1) for _ in range(n + 1)]
        profitable_scheme_dp[0][0] = 1
        mod = 10 ** 9 + 7

        for cur_group, cur_profit in zip(group, profit):
            for g in range(n - cur_group, -1, -1):
                for p in range(minProfit, -1, -1):
                    profitable_scheme_dp[g + cur_group][
                        min(p + cur_profit, minProfit)
                    ] += profitable_scheme_dp[g][p]
            print(profitable_scheme_dp)
        return sum([g[-1] for g in profitable_scheme_dp]) % mod


n = 10
minProfit = 100
group = [
    8,
    8,
    7,
    4,
    3,
    1,
    1,
    6,
    11,
    3,
    1,
    7,
    6,
    9,
    9,
    1,
    8,
    9,
    3,
    10,
    10,
    8,
    7,
    6,
    9,
    10,
    6,
    2,
    2,
    6,
    9,
    7,
    5,
    6,
    2,
    1,
    2,
    10,
    11,
    6,
    8,
    9,
    9,
    8,
    11,
    6,
    2,
    2,
    4,
    5,
    1,
    2,
    1,
    11,
    3,
    2,
    11,
    7,
    11,
    4,
    5,
    7,
    6,
    9,
    6,
    7,
    10,
    10,
    9,
    10,
    10,
    8,
    8,
    6,
    9,
    8,
    5,
    1,
    2,
    5,
    10,
    1,
    4,
    2,
    1,
    5,
    1,
    3,
    6,
    6,
    10,
    6,
    2,
    3,
    2,
    1,
    9,
    6,
    6,
    4,
]
profit = [
    23,
    36,
    94,
    35,
    73,
    7,
    65,
    25,
    22,
    4,
    62,
    62,
    12,
    18,
    89,
    62,
    2,
    66,
    85,
    94,
    73,
    31,
    56,
    95,
    71,
    91,
    53,
    75,
    100,
    47,
    68,
    4,
    64,
    52,
    97,
    8,
    52,
    32,
    98,
    64,
    2,
    64,
    33,
    21,
    52,
    44,
    41,
    50,
    59,
    40,
    48,
    47,
    39,
    9,
    100,
    1,
    43,
    94,
    63,
    23,
    21,
    92,
    36,
    69,
    100,
    8,
    75,
    16,
    79,
    98,
    72,
    83,
    70,
    11,
    3,
    41,
    91,
    18,
    17,
    76,
    71,
    58,
    71,
    62,
    34,
    49,
    58,
    59,
    90,
    84,
    12,
    43,
    27,
    60,
    47,
    89,
    31,
    14,
    11,
    15,
]

n = 5
minProfit = 3
group = [2, 2]
profit = [2, 3]

# n = 10
# minProfit = 5
# group = [2, 3, 5]
# profit = [6, 7, 8]

# n = 1
# minProfit = 1
# group = [2, 2, 2, 2, 2]
# profit = [1, 2, 1, 1, 0]


# n = 1
# minProfit = 1
# group = [1]
# profit = [1]

# n = 1
# minProfit = 1
# group = [1, 1, 1, 1, 2, 2, 1, 2, 1, 1]
# profit = [0, 1, 0, 0, 1, 1, 1, 0, 2, 2]

n = 1
minProfit = 10
group = [
    2,
    1,
    2,
    1,
    1,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    1,
    1,
    2,
    1,
    2,
    2,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    1,
    2,
    2,
    1,
    1,
    2,
    1,
    1,
    2,
    1,
    1,
    1,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    2,
    1,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    1,
    2,
    2,
    2,
    1,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    1,
    2,
    2,
    2,
]
profit = [
    1,
    2,
    5,
    6,
    3,
    0,
    4,
    11,
    3,
    6,
    2,
    6,
    5,
    8,
    2,
    3,
    11,
    3,
    0,
    10,
    10,
    6,
    3,
    0,
    5,
    3,
    6,
    6,
    10,
    2,
    5,
    11,
    2,
    1,
    6,
    9,
    1,
    3,
    10,
    3,
    6,
    8,
    9,
    10,
    6,
    6,
    11,
    0,
    10,
    11,
    2,
    9,
    5,
    0,
    11,
    3,
    1,
    7,
    8,
    5,
    3,
    11,
    1,
    1,
    2,
    8,
    11,
    8,
    5,
    10,
    5,
    8,
    0,
    2,
    9,
    6,
    0,
    0,
    5,
    1,
    5,
    9,
    4,
    10,
    3,
    5,
    7,
    2,
    2,
    4,
    1,
    7,
    10,
    5,
    3,
    9,
    9,
    2,
    4,
    3,
]

n = 95
minProfit = 53
group = [
    82,
    7,
    18,
    34,
    1,
    3,
    83,
    56,
    50,
    34,
    39,
    38,
    76,
    92,
    71,
    2,
    6,
    74,
    1,
    82,
    22,
    73,
    88,
    98,
    6,
    71,
    6,
    26,
    100,
    75,
    57,
    88,
    43,
    16,
    22,
    89,
    7,
    9,
    78,
    97,
    22,
    87,
    34,
    81,
    74,
    56,
    49,
    94,
    87,
    71,
    59,
    6,
    20,
    66,
    64,
    37,
    2,
    42,
    30,
    87,
    73,
    16,
    39,
    87,
    28,
    9,
    95,
    78,
    43,
    59,
    87,
    78,
    2,
    93,
    7,
    22,
    21,
    59,
    68,
    67,
    65,
    63,
    78,
    20,
    82,
    35,
    86,
]
profit = [
    45,
    57,
    38,
    64,
    52,
    92,
    31,
    57,
    31,
    52,
    3,
    12,
    93,
    8,
    11,
    60,
    55,
    92,
    42,
    27,
    40,
    10,
    77,
    53,
    8,
    34,
    87,
    39,
    8,
    35,
    28,
    70,
    32,
    97,
    88,
    54,
    82,
    54,
    54,
    10,
    78,
    23,
    82,
    52,
    10,
    49,
    8,
    36,
    9,
    52,
    81,
    26,
    5,
    2,
    30,
    39,
    89,
    62,
    39,
    100,
    67,
    33,
    86,
    22,
    49,
    15,
    94,
    59,
    47,
    41,
    45,
    17,
    99,
    87,
    77,
    48,
    22,
    77,
    82,
    85,
    97,
    66,
    3,
    38,
    49,
    60,
    66,
]

n = 5
minProfit = 3
group = [2, 2]
profit = [2, 3]

# n = 64
# minProfit = 0
# group = [80, 40]
# profit = [88, 88]

# n = 1
# minProfit = 1
# group = [1, 1, 1, 1, 2, 2, 1, 2, 1, 1]
# profit = [0, 1, 0, 0, 1, 1, 1, 0, 2, 2]

# n = 10
# minProfit = 5
# group = [2, 3, 5]
# profit = [6, 7, 8]

# n = 10
# minProfit = 10
# group = [9]
# profit = [6]
# 9883351
sol = Solution()
print("=" * 100)
print(sol.profitableSchemes(n, minProfit, group, profit))